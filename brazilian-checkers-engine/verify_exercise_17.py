"""
Verificar a solu√ß√£o do Exerc√≠cio #17
Solu√ß√£o sugerida pelo motor: a3 ‚Üí b4
"""

from src.brazilian_engine_complete import BrazilianGameComplete
from src.pos64 import Pos64

print("=" * 70)
print("EXERC√çCIO #17 - VERIFICA√á√ÉO DA SOLU√á√ÉO")
print("=" * 70)
print()

# Posi√ß√£o inicial
white_men = {30, 27, 28, 21, 24}  # c1, f2, h2, a3, g3
black_men = {13, 15, 11, 6}       # a5, e5, f6, c7
black_kings = {2}                  # d8

game = BrazilianGameComplete(white_men, black_men, set(), black_kings)
game.print_board("POSI√á√ÉO INICIAL")

print()
print("Solu√ß√£o sugerida pelo motor:")
print("1. a3 ‚Üí b4 (sacrif√≠cio)")
print("2. a5 x b4 ‚Üí c3")
print("3. c1 ‚Üí d2 (segundo sacrif√≠cio)")
print("4. c3 x d2 ‚Üí e1 ‚ôõ (promove dama)")
print("5. g3 ‚Üí h4 (lance intermedi√°rio)")
print("6. e1 x f2 ‚Üí g3 (dama captura)")
print("7. h2 x g3 x e5 x c7 ‚Üí b8 ‚ôõ (captura tripla!)")
print()
print("=" * 70)
print()

move_count = 0

# Lance 1: a3 ‚Üí b4
move_count += 1
print(f"Lance {move_count}: BRANCAS jogam a3 ‚Üí b4 (SACRIF√çCIO)")
game.make_move(21, 17, [], False)  # a3 (21) ‚Üí b4 (17)
game.print_board(f"Ap√≥s a3 ‚Üí b4")

w_total = len(game.white_men) + len(game.white_kings)
b_total = len(game.black_men) + len(game.black_kings)
print(f"Material: B={w_total} P={b_total}")
print()

# Verificar capturas
caps = game.find_all_captures()
if caps:
    print(f"Capturas obrigat√≥rias para pretas: {len(caps)}")
    for cap in caps:
        notation = Pos64(cap.from_field).to_algebraic()
        for cf in cap.captured_fields:
            notation += f" x {Pos64(cf).to_algebraic()}"
        notation += f" ‚Üí {Pos64(cap.to_field).to_algebraic()}"
        print(f"  {notation}")
print()

# Lance 2: a5 x b4 ‚Üí c3
move_count += 1
print(f"Lance {move_count}: PRETAS capturam a5 x b4 ‚Üí c3")
game.make_move(13, 22, [17], False)  # a5 (13) x b4 (17) ‚Üí c3 (22)
game.print_board(f"Ap√≥s a5 x b4 ‚Üí c3")

w_total = len(game.white_men) + len(game.white_kings)
b_total = len(game.black_men) + len(game.black_kings)
print(f"Material: B={w_total} P={b_total}")
print()

# Lance 3: c1 ‚Üí d2 (segundo sacrif√≠cio)
move_count += 1
print(f"Lance {move_count}: BRANCAS jogam c1 ‚Üí d2 (SEGUNDO SACRIF√çCIO)")
game.make_move(30, 26, [], False)  # c1 (30) ‚Üí d2 (26)
game.print_board(f"Ap√≥s c1 ‚Üí d2")

w_total = len(game.white_men) + len(game.white_kings)
b_total = len(game.black_men) + len(game.black_kings)
print(f"Material: B={w_total} P={b_total}")
print()

# Verificar capturas
caps = game.find_all_captures()
if caps:
    print(f"Capturas obrigat√≥rias para pretas:")
    for cap in caps:
        notation = Pos64(cap.from_field).to_algebraic()
        for cf in cap.captured_fields:
            notation += f" x {Pos64(cf).to_algebraic()}"
        notation += f" ‚Üí {Pos64(cap.to_field).to_algebraic()}"
        if cap.promotes:
            notation += " ‚ôõ"
        print(f"  {notation}")
print()

# Lance 4: c3 x d2 ‚Üí e1 ‚ôõ
move_count += 1
print(f"Lance {move_count}: PRETAS capturam c3 x d2 ‚Üí e1 ‚ôõ (PROMOVE DAMA)")
game.make_move(22, 32, [26], True)  # c3 (22) x d2 (26) ‚Üí e1 (32), promove
game.print_board(f"Ap√≥s c3 x d2 ‚Üí e1 ‚ôõ")

w_total = len(game.white_men) + len(game.white_kings)
b_total = len(game.black_men) + len(game.black_kings)
print(f"Material: B={w_total} P={b_total}")
print(f"Pretas agora t√™m {len(game.black_kings)} damas!")
print()

# Lance 5: g3 ‚Üí h4
move_count += 1
print(f"Lance {move_count}: BRANCAS jogam g3 ‚Üí h4 (lance intermedi√°rio)")
game.make_move(24, 20, [], False)  # g3 (24) ‚Üí h4 (20)
game.print_board(f"Ap√≥s g3 ‚Üí h4")

w_total = len(game.white_men) + len(game.white_kings)
b_total = len(game.black_men) + len(game.black_kings)
print(f"Material: B={w_total} P={b_total}")
print()

# Verificar capturas para dama
caps = game.find_all_captures()
if caps:
    print(f"Capturas obrigat√≥rias para pretas:")
    for cap in caps[:10]:
        notation = Pos64(cap.from_field).to_algebraic()
        for cf in cap.captured_fields:
            notation += f" x {Pos64(cf).to_algebraic()}"
        notation += f" ‚Üí {Pos64(cap.to_field).to_algebraic()}"
        print(f"  {notation}")
print()

# Lance 6: e1 x f2 ‚Üí g3
move_count += 1
print(f"Lance {move_count}: PRETAS - dama captura e1 x f2 ‚Üí g3")
# Encontrar captura que vai para g3
best_cap = None
for cap in caps:
    if Pos64(cap.to_field).to_algebraic() == "g3":
        best_cap = cap
        break

if best_cap:
    notation = Pos64(best_cap.from_field).to_algebraic()
    for cf in best_cap.captured_fields:
        notation += f" x {Pos64(cf).to_algebraic()}"
    notation += f" ‚Üí {Pos64(best_cap.to_field).to_algebraic()}"
    print(f"Executando: {notation}")

    game.make_move(best_cap.from_field, best_cap.to_field, best_cap.captured_fields, best_cap.promotes)
    game.print_board(f"Ap√≥s dama capturar")

    w_total = len(game.white_men) + len(game.white_kings)
    b_total = len(game.black_men) + len(game.black_kings)
    print(f"Material: B={w_total} P={b_total}")
    print()

# Lance 7: h2 x g3 x e5 x c7 ‚Üí b8 ‚ôõ (CAPTURA TRIPLA!)
move_count += 1
print(f"Lance {move_count}: BRANCAS - CAPTURA TRIPLA!")

caps = game.find_all_captures()
print(f"Capturas dispon√≠veis para brancas: {len(caps)}")
for cap in caps:
    notation = Pos64(cap.from_field).to_algebraic()
    for cf in cap.captured_fields:
        notation += f" x {Pos64(cf).to_algebraic()}"
    notation += f" ‚Üí {Pos64(cap.to_field).to_algebraic()}"
    if cap.promotes:
        notation += " ‚ôõ"
    print(f"  {notation} (captura {len(cap.captured_fields)} pe√ßa(s))")

# Encontrar melhor captura
if caps:
    best_cap = max(caps, key=lambda c: len(c.captured_fields))

    notation = Pos64(best_cap.from_field).to_algebraic()
    for cf in best_cap.captured_fields:
        notation += f" x {Pos64(cf).to_algebraic()}"
    notation += f" ‚Üí {Pos64(cap.to_field).to_algebraic()}"
    if best_cap.promotes:
        notation += " ‚ôõ"

    print()
    print(f"Executando: {notation}")
    print(f"Captura {len(best_cap.captured_fields)} pe√ßas!")

    game.make_move(best_cap.from_field, best_cap.to_field, best_cap.captured_fields, best_cap.promotes)
    game.print_board(f"POSI√á√ÉO AP√ìS CAPTURA TRIPLA")

    w_total = len(game.white_men) + len(game.white_kings)
    b_total = len(game.black_men) + len(game.black_kings)
    print(f"Material: B={w_total} P={b_total}")
    print()

print()
print("=" * 70)
print("RESULTADO")
print("=" * 70)
print()

w_total = len(game.white_men) + len(game.white_kings)
b_total = len(game.black_men) + len(game.black_kings)

print(f"Lances totais: {move_count}")
print(f"Material final: Brancas {w_total} vs Pretas {b_total}")
print()

if b_total == 0:
    print("üèÜ BRANCAS VENCERAM - Todas as pe√ßas pretas eliminadas!")
    print()
    print("‚úÖ SOLU√á√ÉO VERIFICADA CORRETA!")
elif w_total > b_total + 1:
    print(f"‚úÖ Brancas t√™m GRANDE VANTAGEM: +{w_total - b_total}")
    print("Posi√ß√£o vencedora!")
elif w_total > b_total:
    print(f"‚úÖ Brancas t√™m pequena vantagem: +{w_total - b_total}")
else:
    print(f"Material: B={w_total} P={b_total}")
    if b_total > w_total:
        print(f"‚ö†Ô∏è  Pretas t√™m vantagem: +{b_total - w_total}")

print()
print("=" * 70)
print("PADR√ÉO T√ÅTICO")
print("=" * 70)
print()

print("Este exerc√≠cio usa o MESMO PADR√ÉO do Exerc√≠cio #14 e #16:")
print()
print("1. DUPLO SACRIF√çCIO (a3‚Üíb4 e c1‚Üíd2)")
print("   - Entrega 2 pe√ßas!")
print("   - For√ßa promo√ß√£o da dama advers√°ria")
print()
print("2. LANCE INTERMEDI√ÅRIO (g3‚Üíh4)")
print("   - For√ßa a dama a capturar")
print("   - Coloca dama em posi√ß√£o vulner√°vel")
print()
print("3. CAPTURA TRIPLA (h2 x g3 x e5 x c7 ‚Üí b8 ‚ôõ)")
print("   - Captura a dama rec√©m-promovida")
print("   - Captura outras 2 pe√ßas")
print("   - Promove pr√≥pria dama")
print("   - Vit√≥ria!")
